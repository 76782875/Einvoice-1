package com.park.einvoice.common;

import java.util.Map;

import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.park.einvoice.common.constants.ProductConstants;
import com.park.einvoice.common.constants.SignKeyConstants;


public class SignTools{

public static final  String DEFAULT_ENC_NAME="HmacSHA256";
	
	public  static  Logger logger =LoggerFactory.getLogger(SignTools.class);
	/**
	 * 加密
	 * @param strSrc 要加密的字符串
	 * @param encName 加密类型 （加密算法有MD5,SHA-1,SHA-256等  默认为SHA-256）
	 * @return
	 */
	public static String encrypt(String strSrc, String key){
		String result ="";
		if (null ==strSrc || "".equals(strSrc)) {  
            return result;  
        } 
		try {
			byte[] bytes = strSrc.getBytes();
			result= bytes2Hex(encryptHMAC(bytes,key));
		} catch (Exception e) {
			logger.error("加密异常 **" +e);
			e.printStackTrace();
		}
		return result;
	}
	
	public static String bytes2Hex(byte[] bts) {
        String des = "";
        String tmp = null;
        for (int i = 0; i < bts.length; i++) {
            tmp = (Integer.toHexString(bts[i] & 0xFF));
            if (tmp.length() == 1) {
                des += "0";
            }
            des += tmp;
        }
        return des;
    }
	/**
	 * HMAC加密
	 * @param data
	 * @param key
	 * @return
	 * @throws Exception
	 */
	public static byte[] encryptHMAC(byte[] data, String key) throws Exception {
		SecretKey secretKey = new SecretKeySpec(key.getBytes(), DEFAULT_ENC_NAME);
		Mac mac = Mac.getInstance(secretKey.getAlgorithm());
		mac.init(secretKey);
		return mac.doFinal(data);
	}
	
	/**
	 * 签名校验
	 * @param request
	 * @return
	 */
    public static boolean verifySign(HttpServletRequest request){
    		String time= request.getHeader("Timestamp");
		String authorization=request.getHeader("Authorization");
		String projectid=request.getHeader("Projectid");
		if (!verifyParams(time, authorization, projectid)) {
			return false;
		}
		if (!verifyTime(time)) {
			logger.info("请求超时..."+request.getRequestURL().toString());
			return false;
		}
		String params =request.getParameter("params");
		return verify(authorization, params, time, request.getRequestURL().toString(), SignKeyConstants.keyMap.get(projectid));
		
    }
   
    
    /** 
     * 校验heard中的时间是否超时（超过五分钟的请求为无效请求）
     * @return
     */
    public static boolean verifyTime(String time){
    	long timestamp =0;
    	long currentTime=System.currentTimeMillis()/1000;
    	if (time.contains(".")) {/** ios 传入的时间参数 样例（1492672986.000000 ） 故需要处理*/
			time =time.substring(0,time.indexOf("."));
			timestamp =Long.parseLong(time);
		}else {
			timestamp =Long.parseLong(time);
		}
    	long interval =DateTools.time_interval(timestamp, currentTime);
    	if (interval>5) { 
    		logger.error("** 请求时间超时，Timestamp={},currentTime={},时间差为: "+interval,timestamp,currentTime);
			return false;
		}else {
			return true;
		}
    }
    /** 
     * 校验heard中的参数是否为空
     * @return
     */
    public static boolean verifyParams(String time,String authorization,String projectid){
    	if (StringUtils.isNotBlank(time) && StringUtils.isNotBlank(authorization) && StringUtils.isNotBlank(projectid)){
    		return true;
    	}else {
    		logger.info("heard 参数错误，{Timestamp="+time+",Authorization="+authorization+",Projectid="+projectid+"}");
			return false;
		}
    }
    /** 
     * 校验heard中的参数是否为空
     * @return
     */
    public static boolean verifyParams(String token){
    	if (StringUtils.isNotBlank(token)){
    		return true;
    	}else {
    		logger.info("heard 参数错误，{token="+token+"}");
			return false;
		}
    }
    
    public static boolean verify(String authorization,String params,String time,String url,String key) {
    	if (StringUtils.isBlank(params)) {
			logger.info("params 参数为空, Projectid={},url={}",key,url);
			return false;
		}
    	try {
    		Map<String, String> map=DataChangeTools.json2Map2(params);
    		String linkparams=DataChangeTools.createLinkString(map);
    		logger.info("** 加密之前的字符串:{}",time+url+"?"+linkparams);
    		String checkvalue=SignTools.encrypt(time+url+"?"+linkparams, key);
    		if (checkvalue.equals(authorization)) {
				return true;
			}else {
				logger.error("** 签名校验不一致，Authorization={}，checkvalue={},访问地址："+url,authorization,checkvalue);
				return false;
			}
    	} catch (Exception e) {
			logger.error("** 签名校验异常：" +e);
			return false;
		}
    }
}
